// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority {
  REQUIRED
  HIGH
  MEDIUM
  LOW
  VERY_LOW
}

model Key {
  id          String      @id
  description String
  priority    Priority    @default(LOW)
  type        String
  tags        String[]
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  values      Value[]
  questions   Question[]
}

model Value {
  id        String   @id @default(uuid())
  keyId     String
  distinctId String
  workspaceId String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       Key      @relation(fields: [keyId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])
}

model Question {
  id        String   @id
  keyId     String
  question  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       Key      @relation(fields: [keyId], references: [id])
}

model Workspace {
  id          String   @id @default(uuid())
  name        String
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  values      Value[]
  tokens      Token[]
}

model User {
  id            String      @id @default(uuid())
  authId        String
  email         String
  status        UserStatus  @default(ACTIVE)
  role          Role        @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  workspaces    Workspace[]
  tokens        Token[]
}

enum UserStatus {
  WAITLIST
  ACTIVE
  DELETED
}

enum Role {
  USER
  ADMIN
}

view AuthUser {
  id    String  @unique
  email String?
  role  String
}

model Token {
  id String @id @default(uuid())
  value String @unique
  userId String
  user User @relation(fields: [userId], references: [id])
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id])
}

